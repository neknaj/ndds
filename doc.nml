!doctitle{Neknaj Document Description System}->align("center")$

>>> !title{空白}$
    空白は基本的にnmlテキストに記述された通りに表示されます
>>> !title{改行}$
    文字が入力されている行では、行末に!code[$]がある場合、出力で改行(HTMLでは<br>)が挿入されません
    文字が入力されていない行では、行末に!code[$]がある場合、出力で改行が挿入されます
    これは、文字が入力されている場合は改行が既定、文字が入力されていない場合は改行なしが規定と考えたとき、!code[$]がある際にそれが反転すると考えることができます


>>> !title{インデント}$
    インデントによって入れ子構造を表現します
    行頭にインデントマーカーが無いとインデントは増えないため、行頭の空白なども正しく扱えます
    インデントは全て4文字の文字列によって開始され、改行後4つの空白がインデントとなります　改行後空白が4つ以下になるとその手前の行までが子となります
    nmlは最後に空の行を追加して処理します　つまり、最後の行がインデントされていたとしても、インデントされていない行が追加される為、トップレベルを除く全ての行が子となります
    >>> !title{インデントマーカー}$
        !code[>>> ] ・・・ NMLの入れ子を表します
        >>> 子はHTMLに変換された際、nestというclassが付いたdivに格納され、HTML上でも入れ子の構造が明示されます
        !note{以下の3つはまだ実装されていません}$
        !code[>>$ ] ・・・ 関数のブロック呼び出しを表します
        >>> 子の関数呼び出しからの返り値がそのままHTMLに入ります
        !code[<<= ] ・・・ 関数のブロック呼び出しに於ける文字列引数を表します
        >>> 子の内容がそのまま関数に渡されます
        !code[<<< ] ・・・ 関数のブロック呼び出しに於けるnml引数を表します
        >>> 子の内容がNMLとしてHTMLに変換された後関数に渡されます

>>> !title{関数呼び出し}$
    別ファイルで定義したJavascriptの関数を呼び出せます
    >>> !title{インライン呼び出し}$
        文中に現れる要素を呼び出します　テキストの中に書くことができます
        !code[!名前(引数1|引数2|...)[文字列引数1\][文字列引数2\]...{nml引数1\}{nml引数2\}...]の形で呼び出します
        普通の引数も文字列引数もnml引数も改行できません
        引数と文字列引数とnml引数は省略できます
        文字列引数とnml引数の順序は自由ですが、普通の引数は必ず名前の直後に来なければなりません
        JavaScriptからは、(文字列引数nml引数の配列,引数1,引数2)のように見えます
        nml引数はHTMLへ変換された後のものが配列に入ります　文字列引数はそのままの文字列が配列に入ります
        配列には呼び出した時の順に入ります
    >>> !title{ブロック呼び出し}$
        !note{この機能はまだ実装されていません}$
        文中ではなく独立して存在する要素を呼び出します　呼び出し自体が一つのインデントになる為、テキストの中に書くことはできません
        普通の引数は改行できません
        ブロック引数は改行できます
        引数とブロック引数は省略できます
        JavaScriptからは、(文字列引数nml引数の配列,引数1,引数2)のように見えます
        nml引数はHTMLへ変換された後のものが配列に入ります　文字列引数はそのままの文字列が配列に入ります
        配列には呼び出した時の順に入ります
        >>> !title{ブロック引数}$
            ブロック引数は改行することができます
            ブロック引数には文字列引数とnml引数があります
    >>> !title{チェーン呼び出し}$
        関数の返り値をさらに加工します
        関数呼び出しの入れ子よりも簡潔に書くことができます
        !code[前の関数呼び出し()->名前(引数1|引数2|...)]の形で呼び出します
        JavaScriptからは、(前の関数の返り値,引数1,引数2)のように見えます
        ブロック呼び出しでは、全てのブロック引数が書き終わった後、他のブロック引数と同じインデントで!code[->名前(引数1|引数2|...)]と書きます
    nml引数と文字列引数が内容となり、普通の引数は設定用として用いられることを推奨します

>>> !title{引数}$
    引数は数値・文字列・関数呼び出しの何れかです
    文字列は!code[""]で囲って下さい　文字列中に現れる!code["]は!code[\\"]とエスケープして下さい
    関数呼び出しはインライン呼び出しのみが可能です　これは引数が改行できない為です